//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""UI"",
            ""id"": ""448c0afd-4fcf-4f8d-ad12-e4073ccc2b61"",
            ""actions"": [
                {
                    ""name"": ""DragAndDropNavigation"",
                    ""type"": ""Button"",
                    ""id"": ""8b706eaa-b9cb-49b4-8974-9538423cfe40"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Selection"",
                    ""type"": ""Button"",
                    ""id"": ""db0a6231-a8db-412e-a596-e76eaa2b50bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Abortion"",
                    ""type"": ""Button"",
                    ""id"": ""cb53294c-c75b-4c22-b86d-6bf5dfebc142"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReturnToLastMenu"",
                    ""type"": ""Button"",
                    ""id"": ""fb1ece7b-83ff-48a4-90b7-fc2eebb537df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d7c77228-fe9c-4f43-9502-58a8f0da382b"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragAndDropNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39e2dc59-f100-4f92-bb35-215fa9a3bf75"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Selection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b27bf97-a7b4-4dbf-beb5-d16c5cf21154"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Abortion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""343ebbd5-6836-4e98-81cb-54339ae8beaa"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReturnToLastMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameManagement"",
            ""id"": ""545759f0-b7e3-4b53-8632-51c672f885fe"",
            ""actions"": [
                {
                    ""name"": ""SwitchToGamepadControl"",
                    ""type"": ""Button"",
                    ""id"": ""75007991-971e-4f19-a707-ee9fd103a11d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""015f3a27-e40e-4982-8e5b-cb5648769c4a"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToGamepadControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_DragAndDropNavigation = m_UI.FindAction("DragAndDropNavigation", throwIfNotFound: true);
        m_UI_Selection = m_UI.FindAction("Selection", throwIfNotFound: true);
        m_UI_Abortion = m_UI.FindAction("Abortion", throwIfNotFound: true);
        m_UI_ReturnToLastMenu = m_UI.FindAction("ReturnToLastMenu", throwIfNotFound: true);
        // GameManagement
        m_GameManagement = asset.FindActionMap("GameManagement", throwIfNotFound: true);
        m_GameManagement_SwitchToGamepadControl = m_GameManagement.FindAction("SwitchToGamepadControl", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_DragAndDropNavigation;
    private readonly InputAction m_UI_Selection;
    private readonly InputAction m_UI_Abortion;
    private readonly InputAction m_UI_ReturnToLastMenu;
    public struct UIActions
    {
        private @InputMaster m_Wrapper;
        public UIActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @DragAndDropNavigation => m_Wrapper.m_UI_DragAndDropNavigation;
        public InputAction @Selection => m_Wrapper.m_UI_Selection;
        public InputAction @Abortion => m_Wrapper.m_UI_Abortion;
        public InputAction @ReturnToLastMenu => m_Wrapper.m_UI_ReturnToLastMenu;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @DragAndDropNavigation.started -= m_Wrapper.m_UIActionsCallbackInterface.OnDragAndDropNavigation;
                @DragAndDropNavigation.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnDragAndDropNavigation;
                @DragAndDropNavigation.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnDragAndDropNavigation;
                @Selection.started -= m_Wrapper.m_UIActionsCallbackInterface.OnSelection;
                @Selection.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnSelection;
                @Selection.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnSelection;
                @Abortion.started -= m_Wrapper.m_UIActionsCallbackInterface.OnAbortion;
                @Abortion.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnAbortion;
                @Abortion.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnAbortion;
                @ReturnToLastMenu.started -= m_Wrapper.m_UIActionsCallbackInterface.OnReturnToLastMenu;
                @ReturnToLastMenu.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnReturnToLastMenu;
                @ReturnToLastMenu.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnReturnToLastMenu;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DragAndDropNavigation.started += instance.OnDragAndDropNavigation;
                @DragAndDropNavigation.performed += instance.OnDragAndDropNavigation;
                @DragAndDropNavigation.canceled += instance.OnDragAndDropNavigation;
                @Selection.started += instance.OnSelection;
                @Selection.performed += instance.OnSelection;
                @Selection.canceled += instance.OnSelection;
                @Abortion.started += instance.OnAbortion;
                @Abortion.performed += instance.OnAbortion;
                @Abortion.canceled += instance.OnAbortion;
                @ReturnToLastMenu.started += instance.OnReturnToLastMenu;
                @ReturnToLastMenu.performed += instance.OnReturnToLastMenu;
                @ReturnToLastMenu.canceled += instance.OnReturnToLastMenu;
            }
        }
    }
    public UIActions @UI => new UIActions(this);

    // GameManagement
    private readonly InputActionMap m_GameManagement;
    private IGameManagementActions m_GameManagementActionsCallbackInterface;
    private readonly InputAction m_GameManagement_SwitchToGamepadControl;
    public struct GameManagementActions
    {
        private @InputMaster m_Wrapper;
        public GameManagementActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchToGamepadControl => m_Wrapper.m_GameManagement_SwitchToGamepadControl;
        public InputActionMap Get() { return m_Wrapper.m_GameManagement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameManagementActions set) { return set.Get(); }
        public void SetCallbacks(IGameManagementActions instance)
        {
            if (m_Wrapper.m_GameManagementActionsCallbackInterface != null)
            {
                @SwitchToGamepadControl.started -= m_Wrapper.m_GameManagementActionsCallbackInterface.OnSwitchToGamepadControl;
                @SwitchToGamepadControl.performed -= m_Wrapper.m_GameManagementActionsCallbackInterface.OnSwitchToGamepadControl;
                @SwitchToGamepadControl.canceled -= m_Wrapper.m_GameManagementActionsCallbackInterface.OnSwitchToGamepadControl;
            }
            m_Wrapper.m_GameManagementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SwitchToGamepadControl.started += instance.OnSwitchToGamepadControl;
                @SwitchToGamepadControl.performed += instance.OnSwitchToGamepadControl;
                @SwitchToGamepadControl.canceled += instance.OnSwitchToGamepadControl;
            }
        }
    }
    public GameManagementActions @GameManagement => new GameManagementActions(this);
    public interface IUIActions
    {
        void OnDragAndDropNavigation(InputAction.CallbackContext context);
        void OnSelection(InputAction.CallbackContext context);
        void OnAbortion(InputAction.CallbackContext context);
        void OnReturnToLastMenu(InputAction.CallbackContext context);
    }
    public interface IGameManagementActions
    {
        void OnSwitchToGamepadControl(InputAction.CallbackContext context);
    }
}
