namespace YPPGUtilities
{
    namespace  InputManagement
    {
        using UnityEngine;
        using UnityEngine.Events;
        using UnityEngine.InputSystem;
        using YPPGUtilities.UI;

        public class InputManagement : MonoBehaviour
        {
            // Enables other scripts to access the InputManagement
            public static InputManagement instance;

            // Drag and drop the input master asset of the new input system in the inspector
            public InputMaster inputMaster;

            // This event is triggered when the InputChangeListener has swapped the classical input to the gamepad input 
            public UnityEvent inputChangedToGamepadEvent;

            // This event is triggered when the InputChangeListener has swapped the gamepad input to the classical input 
            public UnityEvent inputChangedToClassicalEvent;

            // This enables you to enable / disable the OnMouseDown replacement
            public bool onMouseDownIsUsable = true;

            // Specifies whether the cursor is currently hidden or shown
            public bool CursorIsShown { private set; get; } = true;

            // Offers the ability to change the cursor texture when hovering over certain elements
            // If null, prevents the ability to change the texture
            public Texture2D hoverCursor;

            private InputAction onMouseDownReplacement;

            // Awake is called before Start
            private void Awake()
            {
                // The InputMaster class needs to be generated by Unity's Input System
                inputMaster = new InputMaster();

                // Offers a replacement for Unity's OnMouseDown-Event, which no longer works for the new input system
                onMouseDownReplacement = new InputAction(binding: "<Mouse>/leftButton");
                onMouseDownReplacement.performed += _ =>
                {
                    if (onMouseDownIsUsable)
                    {
                        RaycastHit2D hit = Physics2D.Raycast(Camera.main.ScreenToWorldPoint(Mouse.current.position.ReadValue()), Vector2.zero);
                        if (hit.collider != null)
                        {
                            hit.collider.GetComponent<IClickable>()?.OnClick();
                        }
                    }
                };

                inputChangedToGamepadEvent.AddListener(() => ToggleCursor(false));
                inputChangedToClassicalEvent.AddListener(() => ToggleCursor(true));

                onMouseDownReplacement.Enable();
                inputMaster.Enable();
            }

            // Start is called before the first frame update
            private void Start()
            {
                // Prevents multiple instances to be created
                // The InputManagement will exist in EVERY scene
                if (instance == null)
                {
                    instance = this;
                    DontDestroyOnLoad(gameObject);
                }
                else
                {
                    Destroy(gameObject);
                }
            }

            // Used to dispose of the InputManagement when disabled
            private void OnDisable()
            {
                inputMaster.Disable();
            }

            // Enables the cursor management to toggle the cursor and updates the selected game object of the currently open menu if cursor should be hidden
            // Note that the cursor should ONLY be altered by using this method
            // enabled: Should the cursor be shown or hidden?
            public void ToggleCursor(bool enabled)
            {
                if (enabled)
                {
                    // Show the cursor and unlock it when enabling it
                    Cursor.lockState = CursorLockMode.None;
                    Cursor.visible = true;
                    CursorIsShown = true;
                }
                else
                {
                    // Hide the cursor and lock it when disabling it
                    Cursor.lockState = CursorLockMode.Locked;
                    Cursor.visible = false;
                    CursorIsShown = false;

                    if (UIManagement.instance.IsInMenu())
                        UIManagement.instance.currentlyOpenMenu.SetSelectedGameObject();
                }
            }
        }
    }
}